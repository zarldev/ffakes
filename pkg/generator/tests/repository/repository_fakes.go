// Code generated by ffakes v0.0.5 DO NOT EDIT.

package repository

import (
	"context"
	"testing"
)

type FakeUserRepository struct {
	t                   *testing.T
	GetAllUsersCount    int
	FindUserByIDCount   int
	CreateUserCount     int
	DeleteUserByIDCount int
	UpdateUserCount     int
	ExecuteCount        int
	FindUserByNameCount int
	FGetAllUsers        []func(ctx context.Context) ([]User, error)
	FFindUserByID       []func(id int) (u User, err error)
	FCreateUser         []func(user User) error
	FDeleteUserByID     []func(id int) error
	FUpdateUser         []func(old, new User) error
	FExecute            []func(user User) error
	FFindUserByName     []func(name string) (User, error)
}

type GetAllUsersFunc = func(ctx context.Context) ([]User, error)
type FindUserByIDFunc = func(id int) (u User, err error)
type CreateUserFunc = func(user User) error
type DeleteUserByIDFunc = func(id int) error
type UpdateUserFunc = func(old, new User) error
type ExecuteFunc = func(user User) error
type FindUserByNameFunc = func(name string) (User, error)
type UserRepositoryOption func(f *FakeUserRepository)

func OnGetAllUsers(fn ...GetAllUsersFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FGetAllUsers = append(f.FGetAllUsers, fn...)
	}
}

func OnFindUserByID(fn ...FindUserByIDFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FFindUserByID = append(f.FFindUserByID, fn...)
	}
}

func OnCreateUser(fn ...CreateUserFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FCreateUser = append(f.FCreateUser, fn...)
	}
}

func OnDeleteUserByID(fn ...DeleteUserByIDFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FDeleteUserByID = append(f.FDeleteUserByID, fn...)
	}
}

func OnUpdateUser(fn ...UpdateUserFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FUpdateUser = append(f.FUpdateUser, fn...)
	}
}

func OnExecute(fn ...ExecuteFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FExecute = append(f.FExecute, fn...)
	}
}

func OnFindUserByName(fn ...FindUserByNameFunc) UserRepositoryOption {
	return func(f *FakeUserRepository) {
		f.FFindUserByName = append(f.FFindUserByName, fn...)
	}
}

func (f *FakeUserRepository) OnGetAllUsers(fns ...GetAllUsersFunc) {
	for _, fn := range fns {
		f.FGetAllUsers = append(f.FGetAllUsers, fn)
	}
}

func (f *FakeUserRepository) OnFindUserByID(fns ...FindUserByIDFunc) {
	for _, fn := range fns {
		f.FFindUserByID = append(f.FFindUserByID, fn)
	}
}

func (f *FakeUserRepository) OnCreateUser(fns ...CreateUserFunc) {
	for _, fn := range fns {
		f.FCreateUser = append(f.FCreateUser, fn)
	}
}

func (f *FakeUserRepository) OnDeleteUserByID(fns ...DeleteUserByIDFunc) {
	for _, fn := range fns {
		f.FDeleteUserByID = append(f.FDeleteUserByID, fn)
	}
}

func (f *FakeUserRepository) OnUpdateUser(fns ...UpdateUserFunc) {
	for _, fn := range fns {
		f.FUpdateUser = append(f.FUpdateUser, fn)
	}
}

func (f *FakeUserRepository) OnExecute(fns ...ExecuteFunc) {
	for _, fn := range fns {
		f.FExecute = append(f.FExecute, fn)
	}
}

func (f *FakeUserRepository) OnFindUserByName(fns ...FindUserByNameFunc) {
	for _, fn := range fns {
		f.FFindUserByName = append(f.FFindUserByName, fn)
	}
}

func NewFakeUserRepository(t *testing.T, opts ...UserRepositoryOption) *FakeUserRepository {
	f := &FakeUserRepository{t: t}
	for _, opt := range opts {
		opt(f)
	}
	t.Cleanup(func() {
		if f.GetAllUsersCount != len(f.FGetAllUsers) {
			t.Fatalf("expected GetAllUsers to be called %d times but got %d", len(f.FGetAllUsers), f.GetAllUsersCount)
		}
		if f.FindUserByIDCount != len(f.FFindUserByID) {
			t.Fatalf("expected FindUserByID to be called %d times but got %d", len(f.FFindUserByID), f.FindUserByIDCount)
		}
		if f.CreateUserCount != len(f.FCreateUser) {
			t.Fatalf("expected CreateUser to be called %d times but got %d", len(f.FCreateUser), f.CreateUserCount)
		}
		if f.DeleteUserByIDCount != len(f.FDeleteUserByID) {
			t.Fatalf("expected DeleteUserByID to be called %d times but got %d", len(f.FDeleteUserByID), f.DeleteUserByIDCount)
		}
		if f.UpdateUserCount != len(f.FUpdateUser) {
			t.Fatalf("expected UpdateUser to be called %d times but got %d", len(f.FUpdateUser), f.UpdateUserCount)
		}
		if f.ExecuteCount != len(f.FExecute) {
			t.Fatalf("expected Execute to be called %d times but got %d", len(f.FExecute), f.ExecuteCount)
		}
		if f.FindUserByNameCount != len(f.FFindUserByName) {
			t.Fatalf("expected FindUserByName to be called %d times but got %d", len(f.FFindUserByName), f.FindUserByNameCount)
		}
	})
	return f
}

func (fake *FakeUserRepository) GetAllUsers(ctx context.Context) ([]User, error) {
	var idx = fake.GetAllUsersCount
	if fake.GetAllUsersCount >= len(fake.FGetAllUsers) {
		idx = len(fake.FGetAllUsers) - 1
	}
	if len(fake.FGetAllUsers) != 0 {
		o1, o2 := fake.FGetAllUsers[idx](ctx)
		fake.GetAllUsersCount++
		return o1, o2
	}
	return nil, nil
}

func (fake *FakeUserRepository) FindUserByID(id int) (u User, err error) {
	var idx = fake.FindUserByIDCount
	if fake.FindUserByIDCount >= len(fake.FFindUserByID) {
		idx = len(fake.FFindUserByID) - 1
	}
	if len(fake.FFindUserByID) != 0 {
		u, err := fake.FFindUserByID[idx](id)
		fake.FindUserByIDCount++
		return u, err
	}
	return User{}, nil
}

func (fake *FakeUserRepository) CreateUser(user User) error {
	var idx = fake.CreateUserCount
	if fake.CreateUserCount >= len(fake.FCreateUser) {
		idx = len(fake.FCreateUser) - 1
	}
	if len(fake.FCreateUser) != 0 {
		o1 := fake.FCreateUser[idx](user)
		fake.CreateUserCount++
		return o1
	}
	return nil
}

func (fake *FakeUserRepository) DeleteUserByID(id int) error {
	var idx = fake.DeleteUserByIDCount
	if fake.DeleteUserByIDCount >= len(fake.FDeleteUserByID) {
		idx = len(fake.FDeleteUserByID) - 1
	}
	if len(fake.FDeleteUserByID) != 0 {
		o1 := fake.FDeleteUserByID[idx](id)
		fake.DeleteUserByIDCount++
		return o1
	}
	return nil
}

func (fake *FakeUserRepository) UpdateUser(old, new User) error {
	var idx = fake.UpdateUserCount
	if fake.UpdateUserCount >= len(fake.FUpdateUser) {
		idx = len(fake.FUpdateUser) - 1
	}
	if len(fake.FUpdateUser) != 0 {
		o1 := fake.FUpdateUser[idx](old, new)
		fake.UpdateUserCount++
		return o1
	}
	return nil
}

func (fake *FakeUserRepository) Execute(user User) error {
	var idx = fake.ExecuteCount
	if fake.ExecuteCount >= len(fake.FExecute) {
		idx = len(fake.FExecute) - 1
	}
	if len(fake.FExecute) != 0 {
		o1 := fake.FExecute[idx](user)
		fake.ExecuteCount++
		return o1
	}
	return nil
}

func (fake *FakeUserRepository) FindUserByName(name string) (User, error) {
	var idx = fake.FindUserByNameCount
	if fake.FindUserByNameCount >= len(fake.FFindUserByName) {
		idx = len(fake.FFindUserByName) - 1
	}
	if len(fake.FFindUserByName) != 0 {
		o1, o2 := fake.FFindUserByName[idx](name)
		fake.FindUserByNameCount++
		return o1, o2
	}
	return User{}, nil
}
